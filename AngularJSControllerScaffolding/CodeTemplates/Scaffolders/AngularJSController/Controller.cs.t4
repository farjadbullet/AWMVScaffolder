<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System.Collections.Generic;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Net;
using System.Web.Http;
using <#= Model.Namespace #>.Models;

namespace <#= Model.ApiControllerName #>
{
	[Route("api/<#= Model.PluralController #>Api/{id?}", Name = "api_<#= Model.PluralController #>Api")]
	public class <#= Model.PluralController #>ApiController : ApiController 
	{
		private <#=  Model.DbContextType #> db = new <#= Model.DbContextType #>();
		
		public IEnumerable<<#= Model.ModelType #>> GetAll()
		{
			return db.<#= Model.ModelTypePluralized #>;
		}

		public IHttpActionResult Get<#= Model.ModelType #>(int id)
		{
			<#= Model.ModelType #> <#= Model.ModelType.ToLower() #> = db.<#= Model.ModelTypePluralized #>.Find(id);
			if (<#= Model.ModelType.ToLower() #> == null)
			{
				return NotFound();
			}

			return Ok(<#= Model.ModelType.ToLower() #>);
		}

		public IHttpActionResult Post<#= Model.ModelType #>(<#= Model.ModelType #> <#= Model.ModelType.ToLower() #>)
		{
			if (!ModelState.IsValid)
			{
				return BadRequest(ModelState);
			}

			db.<#= Model.ModelTypePluralized #>.Add(<#= Model.ModelType.ToLower() #>);
			db.SaveChanges();

			return CreatedAtRoute("api_<#= Model.PluralController #>Api", new { id = <#= Model.ModelType.ToLower() #>.Id }, <#= Model.ModelType.ToLower() #>);
		}

		public IHttpActionResult Put<#= Model.ModelType #>(int id, <#= Model.ModelType #> <#= Model.ModelType.ToLower() #>)
		{
			if (!ModelState.IsValid)
			{
				return BadRequest(ModelState);
			}

			if (id != <#= Model.ModelType.ToLower() #>.Id)
			{
				return BadRequest();
			}

			db.Entry(<#= Model.ModelType.ToLower() #>).State = EntityState.Modified;

			try
			{
				db.SaveChanges();
			}
			catch (DbUpdateConcurrencyException)
			{
				if (!<#= Model.ModelType #>Exists(id))
				{
					return NotFound();
				}
				else
				{
					throw;
				}
			}

			return StatusCode(HttpStatusCode.NoContent);
		}

		public IHttpActionResult Delete<#= Model.ModelType #>(int id)
		{
			<#= Model.ModelType #> <#= Model.ModelType.ToLower() #> = db.<#= Model.ModelTypePluralized #>.Find(id);
			if (<#= Model.ModelType.ToLower() #> == null)
			{
				return NotFound();
			}

			db.<#= Model.ModelTypePluralized #>.Remove(<#= Model.ModelType.ToLower() #>);
			db.SaveChanges();

			return Ok(<#= Model.ModelType.ToLower() #>);
		}

		private bool <#= Model.ModelType #>Exists(int id)
		{
			return db.<#= Model.ModelTypePluralized #>.Count(m => m.Id == id) > 0;
		}
	}
}